#include <iostream>
#include <vector>
#include <string>
#define up 1
#define diagonal 2

using namespace std;

// Structure to store motorcycle details
struct Motorcycle {
    string name;
    int wholesale_price;
    int retail_price;
};

// Function to solve the knapsack problem
void knapsack(vector<Motorcycle>& motorCycles, int budget) {
    int n = motorCycles.size(); // number of motorcycles
    
    vector<int> w(n+1), v(n+1); // Arrays for wholesale prices and profits

    // Fill the arrays w and v based on the motorcycle's details
    for (int i = 1; i <= n; i++) {
        w[i] = motorCycles[i-1].wholesale_price;  // wholesale price (weight)
        v[i] = motorCycles[i-1].retail_price - motorCycles[i-1].wholesale_price; // profit (value)
    }

    // DP tables to store maximum profit and decisions
    int P[n+1][budget+1]; // Profit table
    int b[n+1][budget+1]; // Backtracking table
    
    // Initialize DP tables
    for (int i = 0; i <= budget; i++) P[0][i] = 0;
    for (int i = 0; i <= n; i++) P[i][0] = 0;

    // DP formula application
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= budget; j++) {
            if (j < w[i]) {
                // We can't take this item as its weight exceeds current budget
                P[i][j] = P[i-1][j];
                b[i][j] = up;
            } else {
                // We can either take the item or skip it
                if (v[i] + P[i-1][j - w[i]] >= P[i-1][j]) {
                    // Taking the item gives higher profit
                    P[i][j] = v[i] + P[i-1][j - w[i]];
                    b[i][j] = diagonal;
                } else {
                    // Skipping the item
                    P[i][j] = P[i-1][j];
                    b[i][j] = up;
                }
            }
        }
    }

    // Output the maximum profit
    cout << "Maximum profit: " << P[n][budget] << " lac" << endl;

    // Backtracking to find the selected motorcycles
    int i = n, j = budget;
    cout << "Selected motorcycles:" << endl;
    while (i > 0) {
        if (b[i][j] == diagonal) {
            cout << motorCycles[i-1].name << " -> wholesale price: " << w[i] 
                 << " lac, profit: " << v[i] << " lac" << endl;
            j = j - w[i]; // Reduce budget by the weight of the selected motorcycle
        }
        i--; // Move to the previous item
    }
}

int main() {
    // Define the motorcycles with their wholesale and retail prices
    vector<Motorcycle> motorCycles = {
        {"Yamaha R15", 3, 5},       // Wholesale = 3, Retail = 5, Profit = 2
        {"Harley Davidson", 6, 14}, // Wholesale = 6, Retail = 14, Profit = 8
        {"Apache RTR 160", 1, 2},   // Wholesale = 1, Retail = 2, Profit = 1
        {"Honda CBR 150R", 4, 6}    // Wholesale = 4, Retail = 6, Profit = 2
    };

    int budget = 10; // Available budget
    knapsack(motorCycles, budget); // Solve the problem using knapsack DP

    return 0;
}

#define up 1
#define diagonal 2
void knapsack(int w[],int v[],int n,int W){
    int P[n+1][W+1];
    int b[n+1][W+1];

    for(int i=0;i<=W;i++) P[0][i]=0;
    for(int i=0;i<=n;i++) P[i][0]=0;

    for(int i=1;i<=n;i++){
        for(int j=1;j<=W;j++){
            if( j < w[i] ){
                //we can't take the item, because item's weight
                //exceeds knapsack capacity
                P[i][j]=P[i-1][j];
                b[i][j]=up;
            }else{
                //we can either take item or skip it
                if( v[i]+P[i-1][ j-w[i] ] >= P[i-1][j]){
                    //taking the item gives max profit
                    P[i][j] = v[i] + P[i-1][ j-w[i] ];
                    b[i][j] = diagonal;
                }else{
                    //skip the item
                    P[i][j]=P[i-1][j];
                    b[i][j]=up;
                }
            }
        }
    }
    cout<<"maximum profit:"<<P[n][W]<<endl;

    int i=n,j=W;
    while(i>0){
        if(b[i][j] == diagonal ){
            cout<<"item "<<i<<" -> w:"<<w[i]<<" v:"<<v[i]<<endl;
            j = j - w[i];
        }
        i--;
    }

}
int main(){
    int w[]={0,2,1,3,2};
    int v[]={0,12,10,20,15};
    int n=4;//total items
    int W=5;//knapsack capacity
    knapsack(w,v,n,W);
}
